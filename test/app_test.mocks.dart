// Mocks generated by Mockito 5.4.1 from annotations
// in wallofquotes/test/app_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wallofquotes/services/analytics_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i2.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> logAddQuote() => (super.noSuchMethod(
        Invocation.method(
          #logAddQuote,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> logSaveQuote() => (super.noSuchMethod(
        Invocation.method(
          #logSaveQuote,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void logFireQuote() => super.noSuchMethod(
        Invocation.method(
          #logFireQuote,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logLikeQuote() => super.noSuchMethod(
        Invocation.method(
          #logLikeQuote,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logDislikeQuote() => super.noSuchMethod(
        Invocation.method(
          #logDislikeQuote,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logReportQuote() => super.noSuchMethod(
        Invocation.method(
          #logReportQuote,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logSwipe() => super.noSuchMethod(
        Invocation.method(
          #logSwipe,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logRefreshQuotes() => super.noSuchMethod(
        Invocation.method(
          #logRefreshQuotes,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
